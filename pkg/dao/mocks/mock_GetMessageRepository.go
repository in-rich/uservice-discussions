// Code generated by mockery v2.49.0. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-discussions/pkg/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockGetMessageRepository is an autogenerated mock type for the GetMessageRepository type
type MockGetMessageRepository struct {
	mock.Mock
}

type MockGetMessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetMessageRepository) EXPECT() *MockGetMessageRepository_Expecter {
	return &MockGetMessageRepository_Expecter{mock: &_m.Mock}
}

// GetMessage provides a mock function with given fields: ctx, messageID
func (_m *MockGetMessageRepository) GetMessage(ctx context.Context, messageID uuid.UUID) (*entities.Message, error) {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *entities.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Message, error)); ok {
		return rf(ctx, messageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Message); ok {
		r0 = rf(ctx, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetMessageRepository_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type MockGetMessageRepository_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - messageID uuid.UUID
func (_e *MockGetMessageRepository_Expecter) GetMessage(ctx interface{}, messageID interface{}) *MockGetMessageRepository_GetMessage_Call {
	return &MockGetMessageRepository_GetMessage_Call{Call: _e.mock.On("GetMessage", ctx, messageID)}
}

func (_c *MockGetMessageRepository_GetMessage_Call) Run(run func(ctx context.Context, messageID uuid.UUID)) *MockGetMessageRepository_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockGetMessageRepository_GetMessage_Call) Return(_a0 *entities.Message, _a1 error) *MockGetMessageRepository_GetMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetMessageRepository_GetMessage_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.Message, error)) *MockGetMessageRepository_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetMessageRepository creates a new instance of MockGetMessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetMessageRepository {
	mock := &MockGetMessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
